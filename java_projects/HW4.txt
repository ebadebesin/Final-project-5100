HW to Chapter 4 “Types & Variables, Classes & Objects” (as in lectures)
Non-programming Assignment
1) In writing, describe bit and byte. Provide examples.
2) In writing, describe types and variables, they relationship and difference between them. Provide examples.
3) In writing, describe local and instance variables, their properties and difference between them. Provide examples.
4) In writing, describe class (static) variables and their properties. Provide examples.
5) In writing, describe the difference between mutable and immutable variables,
6) In writing, describe classes and objects, their relationship and difference. Provide examples.

ANSWER
-------

1) A bit is the basic unit of information in computing and digital communications. Its value is either
0 or 1. Bits are combined to form bytes. A byte is a group of 8
bits. For example, the number 65 is represented as 01000001 in binary, which
is a byte.

2) Types and variables are related but different concepts in programming. Types refer to the data
type of a variable, such as integer, float, or string. 
Variables are the names given to memory locations that hold values. For example, in the statement "int x = 5;", "
int" is the type and "x" is the variable.

3) Local variables are declared inside a method or a block of code and are only accessible within
that scope. Instance variables are declared inside a class and are accessible from any
method within that class. For example, in a class "Person", "name" can be an
instance variable, while "age" can be a local variable in a method "calculateAge".

4) Class variables, also known as static variables, are shared by all instances of a class and
are initialized only once when the class is loaded. For example, in a class "Math",
"PI" can be a class variable.

5) Mutable variables can be changed after they are declared, while immutable variables cannot be
changed. For example, a string in Java is immutable, while an array is mutable.

6) Classes and objects are related but different concepts in programming. Classes are blueprints
or templates for creating objects, while objects are instances of classes. For example, in a
class "Car", "car1" and "car2" are objects.




